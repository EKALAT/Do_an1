from playwright.async_api import async_playwright
from telegram import Update
from telegram.ext import ContextTypes
import time

EXCLUDED_STOCKS = {"VNXALL", "VNINDEX", "VN30", "HNXUPCOMIND", "HNXINDEX", "HNX30", "HNXIndex", "HNXUpcomIndex"}

async def getstock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """L·∫•y danh s√°ch m√£ ch·ª©ng kho√°n t·ª´ SSI v√† tr·∫£ v·ªÅ cho user"""
    await update.message.reply_text("üîÑ ƒêang t·∫£i d·ªØ li·ªáu ch·ª©ng kho√°n...")
    
    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=False)
            context = await browser.new_context(viewport={"width": 1000, "height": 1000})
            page = await context.new_page()
            await page.goto("https://iboard.ssi.com.vn/")
            
            # Ch·ªù trang t·∫£i
            await page.wait_for_timeout(5000)  # Ch·ªù 5 gi√¢y
            
            # Ch·ªù cho d·ªØ li·ªáu t·∫£i
            await page.wait_for_selector(".ag-body-viewport")
            
            # L·∫•y danh s√°ch m√£ ch·ª©ng kho√°n
            stock_code_elements = await page.locator("//div[contains(@class, 'ag-cell') and contains(@class, 'stock-symbol')]").all()
            stock_codes = []
            for el in stock_code_elements:
                code = await el.inner_text()
                if code not in EXCLUDED_STOCKS:
                    stock_codes.append(code)

            # L·∫•y t·∫•t c·∫£ h√†ng d·ªØ li·ªáu
            rows = await page.query_selector_all(".ag-center-cols-container .ag-row")
            stocks_data = []

            for i, row in enumerate(rows[6:]):  # B·ªè qua 6 h√†ng ƒë·∫ßu
                if i >= len(stock_codes):
                    continue

                stock_code = stock_codes[i]
                
                # L·∫•y gi√° th·∫•p, cao v√† kh·ªëi l∆∞·ª£ng
                try:
                    # L·∫•y gi√° th·∫•p
                    low_price_el = await row.query_selector(".ag-cell-color-ref")
                    low_price = await low_price_el.inner_text() if low_price_el else "N/A"
                    
                    # L·∫•y gi√° cao
                    high_price_el = await row.query_selector(".ag-cell-color-up")
                    high_price = await high_price_el.inner_text() if high_price_el else "N/A"
                    
                    # L·∫•y kh·ªëi l∆∞·ª£ng
                    volume_el = await row.query_selector("[aria-colindex='54']")
                    volume = await volume_el.inner_text() if volume_el else "N/A"

                    stocks_data.append({
                        "ma_ck": stock_code,
                        "cao": high_price.strip(),
                        "thap": low_price.strip(),
                        "klgd": volume.strip()
                    })
                except Exception as e:
                    print(f"L·ªói khi l·∫•y d·ªØ li·ªáu cho m√£ {stock_code}: {e}")
                    continue

            await browser.close()

            if not stocks_data:
                await update.message.reply_text("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ch·ª©ng kho√°n!")
                return

            # T·∫°o header cho b·∫£ng
            message = "üìä *B·∫¢NG GI√Å CH·ª®NG KHO√ÅN*\n\n"
            message += "`{:<6} | {:>8} | {:>8} | {:>12}`\n".format("M√£ CK", "Gi√° Th·∫•p", "Gi√° Cao", "T·ªïng KL")
            message += "`" + "-"*40 + "`\n"

            # Chia th√†nh nhi·ªÅu tin nh·∫Øn n·∫øu danh s√°ch qu√° d√†i
            chunk_size = 30  # S·ªë m√£ trong m·ªói tin nh·∫Øn
            
            for i in range(0, len(stocks_data), chunk_size):
                chunk = stocks_data[i:i + chunk_size]
                chunk_message = message if i == 0 else ""  # Ch·ªâ hi·ªán ti√™u ƒë·ªÅ ·ªü tin nh·∫Øn ƒë·∫ßu
                
                for stock in chunk:
                    chunk_message += "`{:<6} | {:>8} | {:>8} | {:>12}`\n".format(
                        stock["ma_ck"],
                        stock["thap"],
                        stock["cao"],
                        stock["klgd"]
                    )
                
                await update.message.reply_text(chunk_message, parse_mode="Markdown")
            
    except Exception as e:
        print(f"L·ªói khi l·∫•y d·ªØ li·ªáu ch·ª©ng kho√°n: {e}")
        await update.message.reply_text("‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi l·∫•y d·ªØ li·ªáu ch·ª©ng kho√°n!")

async def chungkhoan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /chungkhoan v√† g·ª≠i k·∫øt qu·∫£ cho user"""
    await update.message.reply_text("üîÑ ƒêang t·∫£i d·ªØ li·ªáu ch·ª©ng kho√°n...")
    
    stocks = await getstock(update, context)
    if not stocks:
        await update.message.reply_text("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ch·ª©ng kho√°n!")
        return

    message = "üìä *Danh s√°ch m√£ ch·ª©ng kho√°n:*\n\n"
    for i, stock in enumerate(stocks, 1):
        message += f"{i}. `{stock}`\n"

    await update.message.reply_text(message, parse_mode="Markdown")
